{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","auth","firebaseInstance","dbService","firestore","storageService","storage","AuthForm","useState","Auth","onSocialClick","event","a","name","target","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","className","icon","faTwitter","color","size","style","marginBottom","onClick","faGoogle","faGithub","Tweet","tweetObj","isOwner","userObj","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","prev","onSubmit","preventDefault","update","onChange","value","reequired","placeholder","autoFocus","type","displayName","src","width","height","faTrash","faPencilAlt","TweetFactory","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","Boolean","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","orderBy","onSnapshot","snapshot","newArray","docs","map","document","data","marginTop","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","margin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.43307f30.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\"; // 파이어베이스 스토리지 import\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID\n};\n\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const authService = firebase.auth();\nexport const firebaseInstance = firebase; \nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();","import { authService } from \"fbase\";\nimport { useState } from \"react\";\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"\");\n\n    const onChange = (event) => {\n        const {\n            target: { name, value },\n        } = event;\n        if(name === \"email\"){\n            setEmail(value);\n        } else if (name === \"password\"){\n            setPassword(value);\n        }\n    };\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        try{\n            let data;\n            if(newAccount){\n                // create new account\n                data = await authService.createUserWithEmailAndPassword(email, password);\n            } else {\n                // log in\n                data = await authService.signInWithEmailAndPassword(email, password);\n            }\n        }catch(error){\n            setError(error.message);\n        }\n    };\n\n    const toggleAccount = () => setNewAccount((prev) => !prev);\n    \n    return (\n        <>\n            {/* <form onSubmit = {onSubmit} className=\"container\">\n                <input name = \"email\" type = \"email\" placeholder = \"Email\" required value = {email} onChange = {onChange} className=\"authInput\"  />\n                <input name = \"password\" type = \"password\" placeholder = \"Password\" required value = {password} onChange = {onChange} className=\"authInput\" />\n                <input type = \"submit\" value = {newAccount ? \"Create Account\" : \"Log In\"} className=\"authInput authSubmit\" />\n                <div>{error && <span className=\"authError\">{error}</span>}</div>\n            </form>\n            <span onClick={toggleAccount} className=\"authSwitch\" >\n                {newAccount ? \"Sign In\" : \"Create Account\"}\n            </span> */}\n        </>\n    );\n};\nexport default AuthForm;","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n import {\n   faTwitter,\n   faGoogle,\n   faGithub,\n } from \"@fortawesome/free-brands-svg-icons\";\nimport { authService, firebaseInstance } from \"fbase\";\nimport AuthForm from \"components/AuthForm\";\n\nconst Auth = () => {\n    const onSocialClick = async (event) => {\n      const{\n          target : {name},\n      } = event;\n      let provider;\n      if(name === \"google\"){\n          provider = new firebaseInstance.auth.GoogleAuthProvider();\n      }else if(name === \"github\"){\n          provider = new firebaseInstance.auth.GithubAuthProvider();\n      }\n      const data = await authService.signInWithPopup(provider);\n    };\n\n    return (\n        <div className=\"authContainer\">\n            <FontAwesomeIcon \n                icon={faTwitter}\n                color={\"#04AAFF\"}\n                size=\"3x\"\n                style={{marginBottom: 30}}\n            />\n            <AuthForm />\n            <div className=\"authBtns\">\n                <button onClick = {onSocialClick} name = \"google\" className=\"authBtn\">Continue with google <FontAwesomeIcon icon={faGoogle} /></button>\n                <button onClick = {onSocialClick} name = \"github\" className=\"authBtn\">Continue with Github<FontAwesomeIcon icon={faGithub} /></button>\n            </div>\n        </div>\n    );\n};\nexport default Auth;","import { dbService, storageService } from \"fbase\";\nimport { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Tweet = ({ tweetObj, isOwner, userObj }) => {\n\n    const [editing, setEditing] = useState(false);\n    const [newTweet, setNewTweet] = useState(tweetObj.text)\n\n\n    const onDeleteClick = async ()=> {\n        const ok = window.confirm(\"삭제하시겠습니까?\");\n        if(ok) {\n            await dbService.doc(`tweets/${tweetObj.id}`).delete();\n            if(tweetObj.attachmentUrl !== \"\")\n                await storageService.refFromURL(tweetObj.attachmentUrl).delete();\n        }\n    }\n\n    const toggleEditing = () => setEditing((prev) => !prev); //edit토클 이전 상태로 돌리기\n\n    const onChange = (event) => { //edit할 때 변경되는 거 적용\n        const{\n            target: {value},\n        } = event;\n        setNewTweet(value);\n    };\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        await dbService.doc(`tweets/${tweetObj.id}`).update({ text: newTweet });\n        setEditing(false);\n    }\n\n    return (\n        // <div>\n        //     <h4>{tweetObj.Obj.text}</h4>\n        //     {tweetObj.attachmentUrl && (\n        //         <img src={tweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />\n        //     )}\n        //     {isOwner && (\n        //         <>\n        //             <button onClick={onDeleteClick}>Delete Tweet</button>\n        //             <button>Edit Tweet</button>\n        //         </>\n        //     )}\n        <div className=\"tweet\">\n            {editing? (\n            <>\n                <form onSubmit={onSubmit} className=\"container tweetEdit\">\n                    <input onChange = {onChange} value = {newTweet} reequired placeholder=\"Edit youe tweet\" autoFocus className=\"formInput\" />\n                    <input type = \"submit\" value = \"Update Tweet\" className=\"formBtn\" />\n                </form>\n                <button onClick={toggleEditing} className=\"formBtn cancelBtn\">Cancel</button>\n            </>\n            ) : (\n                <>\n                    <div>\n                        <h4>{tweetObj.text}</h4>\n                        <h5>{userObj.displayName}</h5>\n                    </div>\n                    <div>\n                        {tweetObj.attachmentUrl && (\n                            <img src={tweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />\n                        )}\n                    </div>\n                    {isOwner && (\n                        <div className=\"tweet__actions\">\n                            <span onClick={onDeleteClick}>\n                            <FontAwesomeIcon icon={faTrash} />\n                            </span>\n                            <span onClick={toggleEditing}>\n                            <FontAwesomeIcon icon={faPencilAlt} />\n                            </span>\n                        </div>\n                    )}\n                </>\n            )}       \n        </div>\n    );\n};\n\nexport default Tweet;","import { useState } from \"react\";\n import { dbService, storageService } from \"fbase\";\n import { v4 as uuidv4 } from \"uuid\";\n import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n import { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\n const TweetFactory = ({ userObj }) => {\n   const [tweet, setTweet] = useState(\"\");\n   const [attachment, setAttachment] = useState(\"\");\n\n   const onSubmit = async (event) => {\n     event.preventDefault();\n     if (tweet === \"\") {\n       return;\n     }\n\n     let attachmentUrl = \"\";\n\n     if (attachment !== \"\") {\n       const attachmentRef = storageService\n         .ref()\n         .child(`${userObj.uid}/${uuidv4()}`);\n       const response = await attachmentRef.putString(attachment, \"data_url\");\n       attachmentUrl = await response.ref.getDownloadURL();\n     }\n\n     const tweetObj = {\n       text: tweet,\n       createdAt: Date.now(),\n       creatorId: userObj.uid,\n       attachmentUrl,\n     };\n\n     await dbService.collection(\"tweets\").add(tweetObj);\n\n     setTweet(\"\");\n     setAttachment(\"\");\n   };\n\n   const onChange = (event) => {\n     event.preventDefault();\n     const {\n       target: { value },\n     } = event;\n     setTweet(value);\n   };\n\n   const onFileChange = (event) => {\n     const {\n       target: { files },\n     } = event;\n     const theFile = files[0];\n     const reader = new FileReader();\n     reader.onloadend = (finishedEvent) => {\n       const {\n         currentTarget: { result },\n       } = finishedEvent;\n       setAttachment(result);\n     };\n     if (Boolean(theFile)) {\n       reader.readAsDataURL(theFile);\n     }\n   };\n\n   const onClearAttachment = () => setAttachment(\"\");\n\n   return (\n     <form onSubmit={onSubmit} className=\"factoryForm\">\n       <div className=\"factoryInput__container\">\n         <input\n           className=\"factoryInput__input\"\n           value={tweet}\n           onChange={onChange}\n           type=\"text\"\n           placeholder=\"What's on your mind?\"\n           maxLength={120}\n         />\n         <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n       </div>\n       <label for=\"attach-file\" className=\"factoryInput__label\">\n         <span>Add photos</span>\n         <FontAwesomeIcon icon={faPlus} />\n       </label>\n       <input\n         id=\"attach-file\"\n         type=\"file\"\n         accept=\"image/*\"\n         onChange={onFileChange}\n         style={{\n           opacity: 0,\n         }}\n       />\n       {attachment && (\n         <div className=\"factoryForm__attachment\">\n           <img\n             src={attachment}\n             style={{\n               backgroundImage: attachment,\n             }}\n           />\n           <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n             <span>Remove</span>\n             <FontAwesomeIcon icon={faTimes} />\n           </div>\n         </div>\n       )}\n     </form>\n   );\n };\n\n export default TweetFactory;","import { dbService, storageService } from \"fbase\"; \nimport { useEffect, useState } from \"react\";\nimport Tweet from \"components/Tweet\";\nimport TweetFactory from \"components/TweetFactory\";\n\nconst Home = ({userObj}) => {\n    \n    const [tweets, setTweets] = useState([]);\n    \n\n    // const getTweets = async () => { // 데이터베이스에 있는 트위트 글 가져오기. \n    //     const dbTweets = await dbService.collection(\"tweets\").get();  \n    //     dbTweets.forEach((document) => //데이터를 가져와서 읽기 위해서는 forEach 함수를 사용해야 한다.\n    //         {const tweetObject = { ...document.data(), id: document.id }; // 어떤 데이터를 수정하고 삭제할 지 구분하기 위해 document에서 제공하는 id를 이용한다. \n    //         setTweets((prev) => [tweetObject, ...prev]) //순회 이전의 tweets와 순회 중인 데이터를 전개 구문을 이용해서 합친다. 이전 상태가 넘어오는 것은 setState에서 관리한다. \n    //     }); \n    // };\n\n    useEffect(() => {\n        dbService\n       .collection(\"tweets\")\n       .orderBy(\"createdAt\", \"desc\")\n       .onSnapshot((snapshot) => {\n         const newArray = snapshot.docs.map((document) => ({\n           id: document.id,\n           ...document.data(),\n         }));\n         setTweets(newArray);\n       });\n\n        // getTweets();\n    }, []); // useEffect안에서 async await가 필요한 함수 사용 시 외부에 함수를 정의하고 useEffect안에서 그 함수를 실행시켜야 한다. \n\n    \n    return (\n        <div className=\"container\">\n            <TweetFactory  userObj={userObj} />\n            <div style={{marginTop: 30}}>\n                {tweets.map((tweet) => (\n                    <Tweet \n                        userObj = {userObj}\n                        key = {tweet.id} \n                        tweetObj = {tweet}\n                        isOwner = {tweet.creatorId === userObj.uid}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","import { authService, dbService } from \"fbase\";\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Profile = ({ userObj, refreshUser }) => {\n\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n    const onLogOutClick = () => {\n        authService.signOut();\n        history.push(\"/\");\n    };\n\n    const onChange = (event) => {\n        const {\n            target: { value },\n        } = event;\n        setNewDisplayName(value);\n    };\n\n    // // 로그인한 사용자의 트윗만 골라 화면에 출력하도록 코드 구현\n    // const getMyTweets = async () => {\n    //     const tweets = await dbService\n    //         .collection(\"tweets\")\n    //         .where(\"creatorId\", \"==\", userObj.uid) // 파이어베이스가 제공하는 쿼리함수 where\n    //         // 필드, 조건, 찾으려는 값 순서로 인자를 전달해서 사용하면 되는 함수이다. \n    //         // creatorId 필드에서 userObj.uid와 같은 값을 찾기 위한 표현\n    //         .orderBy(\"createdAt\", \"asc\")\n    //         // 정렬 기준 필드, 정렬방법을 무낮열로 전달받는다. \n    //         // asc는 오름차순이다. \n    //         .get();\n\n    //     console.log(tweets.docs.map((doc)=> doc.data()));\n    // };\n\n    // useEffect(()=>{\n    //     getMyTweets();\n    // }, []);\n    // // profile 컴포넌트가 렌더링된 이후 실행될 함수\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        if(userObj.displayName !== newDisplayName) {\n            await userObj.updateProfile({ displayName: newDisplayName })\n            refreshUser(); // user 상태를 실시간으로 업데이트.\n        }\n    };\n\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\" >\n                <input \n                    onChange={onChange}\n                    type=\"text\" \n                    placeholder=\"Display name\" \n                    value={newDisplayName}\n                    autoFocus\n                    className=\"formInput\"\n                />\n                <input \n                    type=\"submit\" \n                    value=\"Update Profile\"\n                    className=\"formBtn\"\n                    style={{\n                        marginTop: 10,\n                    }}\n                />\n            </form>\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n                Log Out\n            </span>\n        </div>\n    );\n\n};\n\nexport default Profile;","import { Link } from \"react-router-dom\";\n import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n import { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\n import { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\n const Navigation = ({ userObj }) => {\n   return (\n     <nav>\n       <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n         <li>\n           <Link to=\"/\" style={{ marginRight: 10 }}>\n             <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n           </Link>\n         </li>\n         <li>\n           <Link\n             to=\"/profile\"\n             style={{\n               marginLeft: 10,\n               display: \"flex\",\n               flexDirection: \"column\",\n               alignItems: \"center\",\n               fontSize: 12,\n             }}\n           >\n             <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n             <span style={{ marginTop: 10 }}>\n               {userObj.displayName\n                 ? `${userObj.displayName}의 Profile`\n                 : \"Profile\"}\n             </span>\n           </Link>\n         </li>\n       </ul>\n     </nav>\n  );\n};\nexport default Navigation;","import { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"./Navigation\";\n\n\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\n    return (\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj} />} \n            {/*isLoggedIn이 true인 경우에만, navigation이 보이도록 처리*/ }\n            <Switch>\n                {isLoggedIn? (\n                    <div\n                        style={{\n                            maxWidth: 890,\n                            width: \"100%\",\n                            margin: \"0 auto\",\n                            marginTop: 80,\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                        }}>\n                        <Route exact path = \"/\" >\n                            <Home userObj = {userObj} />\n                        </Route>\n                        <Route exact path = \"/profile\">\n                            <Profile refreshUser={refreshUser} userObj={userObj} /> \n                            {/* userObj를 profile 컴포넌트에 넘긴다  */}\n                        </Route>\n                    </div>\n                ) : (<Route exact path = \"/\"><Auth /></Route>)}\n            </Switch>\n        </Router>\n        \n    );\n};\n\nexport default AppRouter;","import { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if(user){\n        // setIsLoggedIn(user);\n        setUserObj({\n          uid: user.uid,\n          displayName: user.displayName,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      }else {\n        // setIsLoggedIn(false);\n        setUserObj(false);\n      }\n      setInit(true);\n    })\n  }, []); // 2번째 인자를 []로 지정해야 컴포넌트가 최초로 렌더링 되었을 때 1회만 동작한다. \n  \n  // 프로필을 실시간으로 업데이트 해주기 위한 함수\n  const refreshUser = () => {\n    // setUserObj(authService.currentUser);\n    const user = authService.currentUser;\n    setUserObj({\n      uid: user.uid,\n      displayName: user.displayName,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  \n  return (\n    <>\n      {init ? \n        (<AppRouter \n          refreshUser={refreshUser} \n          isLoggedIn = {Boolean(userObj)} \n          userObj={userObj} \n        />\n        ) : (\"initializing...\")}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport \"./styles.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}