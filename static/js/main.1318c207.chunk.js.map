{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","auth","firebaseInstance","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","update","reequired","autoFocus","src","width","height","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","Boolean","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","orderBy","onSnapshot","snapshot","newArray","docs","map","document","data","marginTop","Profile","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","margin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1318c207.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\"; // 파이어베이스 스토리지 import\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID\n};\n\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const authService = firebase.auth();\nexport const firebaseInstance = firebase; \nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();","import { authService } from \"fbase\";\nimport { useState } from \"react\";\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"\");\n\n    const onChange = (event) => {\n        const {\n            target: { name, value },\n        } = event;\n        if(name === \"email\"){\n            setEmail(value);\n        } else if (name === \"password\"){\n            setPassword(value);\n        }\n    };\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        try{\n            let data;\n            if(newAccount){\n                // create new account\n                data = await authService.createUserWithEmailAndPassword(email, password);\n            } else {\n                // log in\n                data = await authService.signInWithEmailAndPassword(email, password);\n            }\n        }catch(error){\n            setError(error.message);\n        }\n    };\n\n    const toggleAccount = () => setNewAccount((prev) => !prev);\n    \n    return (\n        <>\n            <form onSubmit = {onSubmit} className=\"container\">\n                <input name = \"email\" type = \"email\" placeholder = \"Email\" required value = {email} onChange = {onChange} className=\"authInput\"  />\n                <input name = \"password\" type = \"password\" placeholder = \"Password\" required value = {password} onChange = {onChange} className=\"authInput\" />\n                <input type = \"submit\" value = {newAccount ? \"Create Account\" : \"Log In\"} className=\"authInput authSubmit\" />\n                <div>{error && <span className=\"authError\">{error}</span>}</div>\n            </form>\n            <span onClick={toggleAccount} className=\"authSwitch\" >\n                {newAccount ? \"Sign In\" : \"Create Account\"}\n            </span>\n        </>\n    );\n};\nexport default AuthForm;","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n import {\n   faTwitter,\n   faGoogle,\n   faGithub,\n } from \"@fortawesome/free-brands-svg-icons\";\nimport { authService, firebaseInstance } from \"fbase\";\nimport AuthForm from \"components/AuthForm\";\n\nconst Auth = () => {\n    const onSocialClick = async (event) => {\n      const{\n          target : {name},\n      } = event;\n      let provider;\n      if(name === \"google\"){\n          provider = new firebaseInstance.auth.GoogleAuthProvider();\n      }else if(name === \"github\"){\n          provider = new firebaseInstance.auth.GithubAuthProvider();\n      }\n      const data = await authService.signInWithPopup(provider);\n    };\n\n    return (\n        <div className=\"authContainer\">\n            <FontAwesomeIcon \n                icon={faTwitter}\n                color={\"#04AAFF\"}\n                size=\"3x\"\n                style={{marginBottom: 30}}\n            />\n            <AuthForm />\n            <div className=\"authBtns\">\n                <button onClick = {onSocialClick} name = \"google\" className=\"authBtn\">Continue with google <FontAwesomeIcon icon={faGoogle} /></button>\n                <button onClick = {onSocialClick} name = \"github\" className=\"authBtn\">Continue with Github<FontAwesomeIcon icon={faGithub} /></button>\n            </div>\n        </div>\n    );\n};\nexport default Auth;","import { dbService, storageService } from \"fbase\";\nimport { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Tweet = ({ tweetObj, isOwner }) => {\n\n    const [editing, setEditing] = useState(false);\n    const [newTweet, setNewTweet] = useState(tweetObj.text)\n\n\n    const onDeleteClick = async ()=> {\n        const ok = window.confirm(\"삭제하시겠습니까?\");\n        if(ok) {\n            await dbService.doc(`tweets/${tweetObj.id}`).delete();\n            if(tweetObj.attachmentUrl !== \"\")\n                await storageService.refFromURL(tweetObj.attachmentUrl).delete();\n        }\n    }\n\n    const toggleEditing = () => setEditing((prev) => !prev); //edit토클 이전 상태로 돌리기\n\n    const onChange = (event) => { //edit할 때 변경되는 거 적용\n        const{\n            target: {value},\n        } = event;\n        setNewTweet(value);\n    };\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        await dbService.doc(`tweets/${tweetObj.id}`).update({ text: newTweet });\n        setEditing(false);\n    }\n\n    return (\n        // <div>\n        //     <h4>{tweetObj.Obj.text}</h4>\n        //     {tweetObj.attachmentUrl && (\n        //         <img src={tweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />\n        //     )}\n        //     {isOwner && (\n        //         <>\n        //             <button onClick={onDeleteClick}>Delete Tweet</button>\n        //             <button>Edit Tweet</button>\n        //         </>\n        //     )}\n        <div className=\"tweet\">\n            {editing? (\n            <>\n                <form onSubmit={onSubmit} className=\"container tweetEdit\">\n                    <input onChange = {onChange} value = {newTweet} reequired placeholder=\"Edit youe tweet\" autoFocus className=\"formInput\" />\n                    <input type = \"submit\" value = \"Update Tweet\" className=\"formBtn\" />\n                </form>\n                <button onClick={toggleEditing} className=\"formBtn cancelBtn\">Cancel</button>\n            </>\n            ) : (\n                <>\n                    <h4>{tweetObj.text}</h4>\n                    {tweetObj.attachmentUrl && (\n                        <img src={tweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />\n                    )}\n                    {isOwner && (\n                        <div className=\"tweet__actions\">\n                        <span onClick={onDeleteClick}>\n                          <FontAwesomeIcon icon={faTrash} />\n                        </span>\n                        <span onClick={toggleEditing}>\n                          <FontAwesomeIcon icon={faPencilAlt} />\n                        </span>\n                      </div>\n         \n                    )}\n                </>\n            )}       \n        </div>\n    );\n};\n\nexport default Tweet;","import { useState } from \"react\";\n import { dbService, storageService } from \"fbase\";\n import { v4 as uuidv4 } from \"uuid\";\n import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n import { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\n const TweetFactory = ({ userObj }) => {\n   const [tweet, setTweet] = useState(\"\");\n   const [attachment, setAttachment] = useState(\"\");\n\n   const onSubmit = async (event) => {\n     event.preventDefault();\n     if (tweet === \"\") {\n       return;\n     }\n\n     let attachmentUrl = \"\";\n\n     if (attachment !== \"\") {\n       const attachmentRef = storageService\n         .ref()\n         .child(`${userObj.uid}/${uuidv4()}`);\n       const response = await attachmentRef.putString(attachment, \"data_url\");\n       attachmentUrl = await response.ref.getDownloadURL();\n     }\n\n     const tweetObj = {\n       text: tweet,\n       createdAt: Date.now(),\n       creatorId: userObj.uid,\n       attachmentUrl,\n     };\n\n     await dbService.collection(\"tweets\").add(tweetObj);\n\n     setTweet(\"\");\n     setAttachment(\"\");\n   };\n\n   const onChange = (event) => {\n     event.preventDefault();\n     const {\n       target: { value },\n     } = event;\n     setTweet(value);\n   };\n\n   const onFileChange = (event) => {\n     const {\n       target: { files },\n     } = event;\n     const theFile = files[0];\n     const reader = new FileReader();\n     reader.onloadend = (finishedEvent) => {\n       const {\n         currentTarget: { result },\n       } = finishedEvent;\n       setAttachment(result);\n     };\n     if (Boolean(theFile)) {\n       reader.readAsDataURL(theFile);\n     }\n   };\n\n   const onClearAttachment = () => setAttachment(\"\");\n\n   return (\n     <form onSubmit={onSubmit} className=\"factoryForm\">\n       <div className=\"factoryInput__container\">\n         <input\n           className=\"factoryInput__input\"\n           value={tweet}\n           onChange={onChange}\n           type=\"text\"\n           placeholder=\"What's on your mind?\"\n           maxLength={120}\n         />\n         <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n       </div>\n       <label for=\"attach-file\" className=\"factoryInput__label\">\n         <span>Add photos</span>\n         <FontAwesomeIcon icon={faPlus} />\n       </label>\n       <input\n         id=\"attach-file\"\n         type=\"file\"\n         accept=\"image/*\"\n         onChange={onFileChange}\n         style={{\n           opacity: 0,\n         }}\n       />\n       {attachment && (\n         <div className=\"factoryForm__attachment\">\n           <img\n             src={attachment}\n             style={{\n               backgroundImage: attachment,\n             }}\n           />\n           <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n             <span>Remove</span>\n             <FontAwesomeIcon icon={faTimes} />\n           </div>\n         </div>\n       )}\n     </form>\n   );\n };\n\n export default TweetFactory;","import { dbService, storageService } from \"fbase\"; \nimport { useEffect, useState } from \"react\";\nimport Tweet from \"components/Tweet\";\nimport TweetFactory from \"components/TweetFactory\";\n\nconst Home = ({userObj}) => {\n    \n    const [tweets, setTweets] = useState([]);\n    \n\n    // const getTweets = async () => { // 데이터베이스에 있는 트위트 글 가져오기. \n    //     const dbTweets = await dbService.collection(\"tweets\").get();  \n    //     dbTweets.forEach((document) => //데이터를 가져와서 읽기 위해서는 forEach 함수를 사용해야 한다.\n    //         {const tweetObject = { ...document.data(), id: document.id }; // 어떤 데이터를 수정하고 삭제할 지 구분하기 위해 document에서 제공하는 id를 이용한다. \n    //         setTweets((prev) => [tweetObject, ...prev]) //순회 이전의 tweets와 순회 중인 데이터를 전개 구문을 이용해서 합친다. 이전 상태가 넘어오는 것은 setState에서 관리한다. \n    //     }); \n    // };\n\n    useEffect(() => {\n        dbService\n       .collection(\"tweets\")\n       .orderBy(\"createdAt\", \"desc\")\n       .onSnapshot((snapshot) => {\n         const newArray = snapshot.docs.map((document) => ({\n           id: document.id,\n           ...document.data(),\n         }));\n         setTweets(newArray);\n       });\n\n        // getTweets();\n    }, []); // useEffect안에서 async await가 필요한 함수 사용 시 외부에 함수를 정의하고 useEffect안에서 그 함수를 실행시켜야 한다. \n\n    \n    return (\n        <div className=\"container\">\n            <TweetFactory  userObj={userObj} />\n            <div style={{marginTop: 30}}>\n                {tweets.map((tweet) => (\n                    <Tweet \n                        key = {tweet.id} \n                        tweetObj = {tweet}\n                        isOwner = {tweet.creatorId === userObj.uid}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","import { authService, dbService } from \"fbase\";\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Profile = ({ userObj, refreshUser }) => {\n\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n    const onLogOutClick = () => {\n        authService.signOut();\n        history.push(\"/\");\n    };\n\n    const onChange = (event) => {\n        const {\n            target: { value },\n        } = event;\n        setNewDisplayName(value);\n    };\n\n    // // 로그인한 사용자의 트윗만 골라 화면에 출력하도록 코드 구현\n    // const getMyTweets = async () => {\n    //     const tweets = await dbService\n    //         .collection(\"tweets\")\n    //         .where(\"creatorId\", \"==\", userObj.uid) // 파이어베이스가 제공하는 쿼리함수 where\n    //         // 필드, 조건, 찾으려는 값 순서로 인자를 전달해서 사용하면 되는 함수이다. \n    //         // creatorId 필드에서 userObj.uid와 같은 값을 찾기 위한 표현\n    //         .orderBy(\"createdAt\", \"asc\")\n    //         // 정렬 기준 필드, 정렬방법을 무낮열로 전달받는다. \n    //         // asc는 오름차순이다. \n    //         .get();\n\n    //     console.log(tweets.docs.map((doc)=> doc.data()));\n    // };\n\n    // useEffect(()=>{\n    //     getMyTweets();\n    // }, []);\n    // // profile 컴포넌트가 렌더링된 이후 실행될 함수\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        if(userObj.displayName !== newDisplayName) {\n            await userObj.updateProfile({ displayName: newDisplayName })\n            refreshUser(); // user 상태를 실시간으로 업데이트.\n        }\n    };\n\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\" >\n                <input \n                    onChange={onChange}\n                    type=\"text\" \n                    placeholder=\"Display name\" \n                    value={newDisplayName}\n                    autoFocus\n                    className=\"formInput\"\n                />\n                <input \n                    type=\"submit\" \n                    value=\"Update Profile\"\n                    className=\"formBtn\"\n                    style={{\n                        marginTop: 10,\n                    }}\n                />\n            </form>\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n                Log Out\n            </span>\n        </div>\n    );\n\n};\n\nexport default Profile;","import { Link } from \"react-router-dom\";\n import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n import { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\n import { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\n const Navigation = ({ userObj }) => {\n   return (\n     <nav>\n       <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n         <li>\n           <Link to=\"/\" style={{ marginRight: 10 }}>\n             <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n           </Link>\n         </li>\n         <li>\n           <Link\n             to=\"/profile\"\n             style={{\n               marginLeft: 10,\n               display: \"flex\",\n               flexDirection: \"column\",\n               alignItems: \"center\",\n               fontSize: 12,\n             }}\n           >\n             <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n             <span style={{ marginTop: 10 }}>\n               {userObj.displayName\n                 ? `${userObj.displayName}의 Profile`\n                 : \"Profile\"}\n             </span>\n           </Link>\n         </li>\n       </ul>\n     </nav>\n  );\n};\nexport default Navigation;","import { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"./Navigation\";\n\n\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\n    return (\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj} />} \n            {/*isLoggedIn이 true인 경우에만, navigation이 보이도록 처리*/ }\n            <Switch>\n                {isLoggedIn? (\n                    <div\n                        style={{\n                            maxWidth: 890,\n                            width: \"100%\",\n                            margin: \"0 auto\",\n                            marginTop: 80,\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                        }}>\n                        <Route exact path = \"/\" >\n                            <Home userObj = {userObj} />\n                        </Route>\n                        <Route exact path = \"/profile\">\n                            <Profile refreshUser={refreshUser} userObj={userObj} /> \n                            {/* userObj를 profile 컴포넌트에 넘긴다  */}\n                        </Route>\n                    </div>\n                ) : (<Route exact path = \"/\"><Auth /></Route>)}\n            </Switch>\n        </Router>\n        \n    );\n};\n\nexport default AppRouter;","import { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if(user){\n        // setIsLoggedIn(user);\n        setUserObj({\n          uid: user.uid,\n          displayName: user.displayName,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      }else {\n        // setIsLoggedIn(false);\n        setUserObj(false);\n      }\n      setInit(true);\n    })\n  }, []); // 2번째 인자를 []로 지정해야 컴포넌트가 최초로 렌더링 되었을 때 1회만 동작한다. \n  \n  // 프로필을 실시간으로 업데이트 해주기 위한 함수\n  const refreshUser = () => {\n    // setUserObj(authService.currentUser);\n    const user = authService.currentUser;\n    setUserObj({\n      uid: user.uid,\n      displayName: user.displayName,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  \n  return (\n    <>\n      {init ? \n        (<AppRouter \n          refreshUser={refreshUser} \n          isLoggedIn = {Boolean(userObj)} \n          userObj={userObj} \n        />\n        ) : (\"initializing...\")}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport \"./styles.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}