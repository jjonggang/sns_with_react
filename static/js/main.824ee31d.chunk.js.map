{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","auth","firebaseInstance","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","window","confirm","doc","id","delete","attachmentUrl","refFromURL","toggleEditing","update","reequired","src","width","height","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","collection","add","createdAt","Date","now","creatorId","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","newArray","docs","map","document","data","Profile","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","to","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.824ee31d.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\"; // 파이어베이스 스토리지 import\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID\n};\n\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const authService = firebase.auth();\nexport const firebaseInstance = firebase; \nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();","import { authService } from \"fbase\";\nimport { useState } from \"react\";\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"\");\n\n    const onChange = (event) => {\n        const {\n            target: { name, value },\n        } = event;\n        if(name === \"email\"){\n            setEmail(value);\n        } else if (name === \"password\"){\n            setPassword(value);\n        }\n    };\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        try{\n            let data;\n            if(newAccount){\n                // create new account\n                data = await authService.createUserWithEmailAndPassword(email, password);\n            } else {\n                // log in\n                data = await authService.signInWithEmailAndPassword(email, password);\n            }\n        }catch(error){\n            setError(error.message);\n        }\n    };\n\n    const toggleAccount = () => setNewAccount((prev) => !prev);\n    \n    return (\n        <>\n            <form onSubmit = {onSubmit}>\n                <input name = \"email\" type = \"email\" placeholder = \"Email\" required value = {email} onChange = {onChange}  />\n                <input name = \"password\" type = \"password\" placeholder = \"Password\" required value = {password} onChange = {onChange}  />\n                <input type = \"submit\" value = {newAccount ? \"Create Account\" : \"Log In\"} />\n                <div>{error}</div>\n            </form>\n            <span onClick={toggleAccount}>\n                {newAccount ? \"Sign In\" : \"Create Account\"}\n            </span>\n        </>\n    );\n};\nexport default AuthForm;","import { authService, firebaseInstance } from \"fbase\";\nimport AuthForm from \"components/AuthForm\";\n\nconst Auth = () => {\n    const onSocialClick = async (event) => {\n      const{\n          target : {name},\n      } = event;\n      let provider;\n      if(name === \"google\"){\n          provider = new firebaseInstance.auth.GoogleAuthProvider();\n      }else if(name === \"github\"){\n          provider = new firebaseInstance.auth.GithubAuthProvider();\n      }\n      const data = await authService.signInWithPopup(provider);\n    };\n\n    return (\n        <div>\n            <AuthForm />\n            <div>\n                <button onClick = {onSocialClick} name = \"google\">Continue with google</button>\n                <button onClick = {onSocialClick} name = \"github\">Continue with Github</button>\n            </div>\n        </div>\n    );\n};\nexport default Auth;","import { dbService, storageService } from \"fbase\";\nimport { useState } from \"react\";\n \nconst Tweet = ({ tweetObj, isOwner }) => {\n\n    const [editing, setEditing] = useState(false);\n    const [newTweet, setNewTweet] = useState(tweetObj.text)\n\n\n    const onDeleteClick = async ()=> {\n        const ok = window.confirm(\"삭제하시겠습니까?\");\n        if(ok) {\n            await dbService.doc(`tweets/${tweetObj.id}`).delete();\n            if(tweetObj.attachmentUrl !== \"\")\n                await storageService.refFromURL(tweetObj.attachmentUrl).delete();\n        }\n    }\n\n    const toggleEditing = () => setEditing((prev) => !prev); //edit토클 이전 상태로 돌리기\n\n    const onChange = (event) => { //edit할 때 변경되는 거 적용\n        const{\n            target: {value},\n        } = event;\n        setNewTweet(value);\n    };\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        await dbService.doc(`tweets/${tweetObj.id}`).update({ text: newTweet });\n        setEditing(false);\n    }\n\n    return (\n        // <div>\n        //     <h4>{tweetObj.Obj.text}</h4>\n        //     {tweetObj.attachmentUrl && (\n        //         <img src={tweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />\n        //     )}\n        //     {isOwner && (\n        //         <>\n        //             <button onClick={onDeleteClick}>Delete Tweet</button>\n        //             <button>Edit Tweet</button>\n        //         </>\n        //     )}\n        <div>\n            {editing? (\n            <>\n                <form onSubmit={onSubmit}>\n                    <input onChange = {onChange} value = {newTweet} reequired />\n                    <input type = \"submit\" value = \"Update Tweet\" />\n                </form>\n                <button onClick={toggleEditing}>Cancel</button>\n            </>\n            ) : (\n                <>\n                    <h4>{tweetObj.text}</h4>\n                    {tweetObj.attachmentUrl && (\n                        <img src={tweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />\n                    )}\n                    {isOwner && (\n                        <>\n                            <button onClick={onDeleteClick}>Delete Tweet</button>\n                            <button onClick={toggleEditing}>Edit Tweet</button>\n                        </>\n                    )}\n                </>\n            )}       \n        </div>\n    );\n};\n\nexport default Tweet;","import { useState } from \"react\";\nimport { dbService, storageService } from \"fbase\";\nimport { v4 as uuidv4 } from \"uuid\"; //깃허브의 UUID Readme 문서를 확인하자\n\n\nconst TweetFactory = ({userObj}) => {\n\n    const [tweet, setTweet] = useState(\"\");\n    const [attachment, setAttachment] = useState(\"\");\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        const attachmentRef = storageService\n            .ref()\n            .child(`${userObj.uid}/${uuidv4()}`);\n        const response = await attachmentRef.putString(attachment, \"data_url\");\n        const attachmentUrl = await response.ref.getDownloadURL();\n        // console.log(await response.ref.getDownloadURL());\n        await dbService.collection(\"tweets\").add({\n            text: tweet,\n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n        });\n        setTweet(\"\");\n        setAttachment(\"\"); // attachment 초기화\n    };\n\n    const onChange = (event) => {\n        event.preventDefault();\n        const{\n            target : {value},\n        } = event;\n        setTweet(value);\n    };\n\n    const onFileChange = (event) => {\n        const {\n            target: {files}, \n        } = event;\n        const theFile = files[0];\n        const reader = new FileReader();\n        reader.onloadend = (finishedEvent) => { // onloadend는 readAsDataURL 함수에 전달할 인자, 즉 파일이 함수로 들어간 이후 결과값이 나온 다음 상황을 감지한다. \n            const { \n                currentTarget : {result},\n            } = finishedEvent;\n            setAttachment(result);\n        };\n        reader.readAsDataURL(theFile); // 파일 정보를 인자로 받아서 파일 위치를 URL로 반환해준다. \n        // 이 함수는 웹 브라우저가 파일을 인식하는 시점, 웹 브라우저 파일 인식이 끝난 시점을 포함하고 있어서 시점까지 함꼐 관리해야한다. \n    };\n\n    const onClearAttachment = () => setAttachment(\"\"); //파일 취소 적용을 위해서 \n\n\n    return (\n        <form onSubmit = {onSubmit}>\n            <input\n                value = {tweet}\n                onChange = {onChange}\n                type = \"text\"\n                placeholder = \"What's on your mind\"\n                maxLength={120} \n            />\n            <input type = \"file\" accept = \"image/*\" onChange = {onFileChange} />\n            <input type = \"submit\" value = \"Tweet\" />\n            {attachment && ( //attachment가 있는 경우에만 img 엘리먼트를 출력한다. \n                <div>\n                    <img src={attachment} width=\"50px\" height=\"50px\" />\n                    <button onClick = {onClearAttachment}>Clear</button>\n                </div>\n            )}\n        </form>\n    );\n};\n\nexport default TweetFactory;","import { dbService, storageService } from \"fbase\"; \nimport { useEffect, useState } from \"react\";\nimport Tweet from \"components/Tweet\";\nimport TweetFactory from \"components/TweetFactory\";\n\nconst Home = ({userObj}) => {\n    \n    const [tweets, setTweets] = useState([]);\n    \n\n    // const getTweets = async () => { // 데이터베이스에 있는 트위트 글 가져오기. \n    //     const dbTweets = await dbService.collection(\"tweets\").get();  \n    //     dbTweets.forEach((document) => //데이터를 가져와서 읽기 위해서는 forEach 함수를 사용해야 한다.\n    //         {const tweetObject = { ...document.data(), id: document.id }; // 어떤 데이터를 수정하고 삭제할 지 구분하기 위해 document에서 제공하는 id를 이용한다. \n    //         setTweets((prev) => [tweetObject, ...prev]) //순회 이전의 tweets와 순회 중인 데이터를 전개 구문을 이용해서 합친다. 이전 상태가 넘어오는 것은 setState에서 관리한다. \n    //     }); \n    // };\n\n    useEffect(() => {\n        dbService.collection(\"tweets\").onSnapshot((snapshot) => {\n            const newArray = snapshot.docs.map((document) => ({\n                id: document.id,\n                ...document.data(),\n            }));\n            setTweets(newArray);\n        });\n        // getTweets();\n    }, []); // useEffect안에서 async await가 필요한 함수 사용 시 외부에 함수를 정의하고 useEffect안에서 그 함수를 실행시켜야 한다. \n\n    \n    return (\n        <>\n            <TweetFactory  userObj={userObj} />\n            <div>\n                {tweets.map((tweet) => (\n                    <Tweet \n                        key = {tweet.id} \n                        tweetObj = {tweet}\n                        isOwner = {tweet.creatorId === userObj.uid}\n                    />\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport default Home;","import { authService, dbService } from \"fbase\";\nimport { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Profile = ({ userObj, refreshUser }) => {\n\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n    const onLogOutClick = () => {\n        authService.signOut();\n        history.push(\"/\");\n    };\n\n    const onChange = (event) => {\n        const {\n            target: { value },\n        } = event;\n        setNewDisplayName(value);\n    };\n\n    // // 로그인한 사용자의 트윗만 골라 화면에 출력하도록 코드 구현\n    // const getMyTweets = async () => {\n    //     const tweets = await dbService\n    //         .collection(\"tweets\")\n    //         .where(\"creatorId\", \"==\", userObj.uid) // 파이어베이스가 제공하는 쿼리함수 where\n    //         // 필드, 조건, 찾으려는 값 순서로 인자를 전달해서 사용하면 되는 함수이다. \n    //         // creatorId 필드에서 userObj.uid와 같은 값을 찾기 위한 표현\n    //         .orderBy(\"createdAt\", \"asc\")\n    //         // 정렬 기준 필드, 정렬방법을 무낮열로 전달받는다. \n    //         // asc는 오름차순이다. \n    //         .get();\n\n    //     console.log(tweets.docs.map((doc)=> doc.data()));\n    // };\n\n    // useEffect(()=>{\n    //     getMyTweets();\n    // }, []);\n    // // profile 컴포넌트가 렌더링된 이후 실행될 함수\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        if(userObj.displayName !== newDisplayName) {\n            await userObj.updateProfile({ displayName: newDisplayName })\n            refreshUser(); // user 상태를 실시간으로 업데이트.\n        }\n    };\n\n    return (\n        <>\n            <form onSubmit={onSubmit}>\n                <input \n                    onChange={onChange}\n                    type=\"text\" \n                    placeholder=\"Display name\" \n                    value={newDisplayName}\n                />\n                <input type=\"submit\" value=\"Update Profile\" />\n            </form>\n            <button onClick = {onLogOutClick}>Log Out</button>\n        </>\n    );\n\n};\n\nexport default Profile;","import { Link } from \"react-router-dom\";\n\nconst Navigation = ({ userObj }) => {\n    return(\n        <nav>\n            <ul>\n                <li>\n                    <Link to =\"/\">Home</Link>\n                </li>\n                <li>\n                    <Link to = \"/profile\">{userObj.displayName}의 Profile</Link>\n                </li>\n            </ul>\n        </nav>\n    );\n};\n\nexport default Navigation;","import { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"./Navigation\";\n\n\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\n    return (\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj} />} \n            {/*isLoggedIn이 true인 경우에만, navigation이 보이도록 처리*/ }\n            <Switch>\n                {isLoggedIn? (\n                    <>\n                        <Route exact path = \"/\" >\n                            <Home userObj = {userObj} />\n                        </Route>\n                        <Route exact path = \"/profile\">\n                            <Profile refreshUser={refreshUser} userObj={userObj} /> \n                            {/* userObj를 profile 컴포넌트에 넘긴다  */}\n                        </Route>\n                    </>\n                ) : (<Route exact path = \"/\"><Auth /></Route>)}\n            </Switch>\n        </Router>\n        \n    );\n};\n\nexport default AppRouter;","import { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if(user){\n        // setIsLoggedIn(user);\n        setUserObj({\n          uid: user.uid,\n          displayName: user.displayName,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      }else {\n        // setIsLoggedIn(false);\n        setUserObj(false);\n      }\n      setInit(true);\n    })\n  }, []); // 2번째 인자를 []로 지정해야 컴포넌트가 최초로 렌더링 되었을 때 1회만 동작한다. \n  \n  // 프로필을 실시간으로 업데이트 해주기 위한 함수\n  const refreshUser = () => {\n    // setUserObj(authService.currentUser);\n    const user = authService.currentUser;\n    setUserObj({\n      uid: user.uid,\n      displayName: user.displayName,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  \n  return (\n    <>\n      {init ? \n        (<AppRouter \n          refreshUser={refreshUser} \n          isLoggedIn = {Boolean(userObj)} \n          userObj={userObj} \n        />\n        ) : (\"initializing...\")}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}